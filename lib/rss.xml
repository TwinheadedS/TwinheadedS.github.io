<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Data Science]]></title><description><![CDATA[Obsidian digital garden]]></description><link>http://github.com/dylang/node-rss</link><image><url>lib\media\favicon.png</url><title>Data Science</title><link></link></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Wed, 22 May 2024 09:27:42 GMT</lastBuildDate><atom:link href="lib\rss.xml" rel="self" type="application/rss+xml"/><pubDate>Wed, 22 May 2024 09:27:40 GMT</pubDate><ttl>60</ttl><dc:creator></dc:creator><item><title><![CDATA[COS20007 OOP Overview]]></title><description><![CDATA[ 
 <br><br>Note<a class="internal-link" href="\cos20007-oop\documentation.html" target="_self"></a>Documentation of the libraries are maintained by the library dev...4/24/2024, 3:31:50 PM<a class="internal-link" href="\cos20007-oop\error-messages.html" target="_self"></a>Whenever we make mistakes we will get an error message4/24/2024, 1:28:07 PM<a class="internal-link" href="\cos20007-oop\exceptions.html" target="_self"></a>Exceptions are one way of reporting errors in our code4/22/2024, 8:42:57 PMNote<a class="internal-link" href="\cos20007-oop\inheritence.html" target="_self"></a>==Generalization and Specialization of abstraction==4/22/2024, 4:11:22 PMNote<a class="internal-link" href="\cos20007-oop\interfaces.html" target="_self"></a>We use an interface to define the features we need.4/22/2024, 5:21:53 PMNote<a class="internal-link" href="\cos20007-oop\method.html" target="_self"></a>Method are how we define in our object what the object can do, m...4/24/2024, 1:09:25 PMNote<a class="internal-link" href="\cos20007-oop\object-collaboration.html" target="_self"></a>- Association represents a relationship between two or more obje...4/4/2024, 4:15:00 PMNote<a class="internal-link" href="\cos20007-oop\polymorphism.html" target="_self"></a>It is the use of child objects where the parent is expected4/22/2024, 4:21:15 PM<a class="internal-link" href="\cos20007-oop\responsibility-driven-design.html" target="_self"></a>Software development involves providing instructions for an unin...4/22/2024, 9:46:43 PM<a class="internal-link" href="\cos20007-oop\scope.html" target="_self"></a>Scope tells us where a variable can be accessed (Who knows about...4/24/2024, 1:20:04 PMNote<a class="internal-link" href="\cos20007-oop\the-stack-&amp;-the-heap.html" target="_self"></a>- Current state of our code (Local variables)4/22/2024, 2:02:53 PM]]></description><link>cos20007-oop\cos20007-oop.html</link><guid isPermaLink="false">COS20007 OOP/COS20007 OOP.md</guid><pubDate>Thu, 02 May 2024 12:38:57 GMT</pubDate></item><item><title><![CDATA[Documentation]]></title><description><![CDATA[ 
 <br><br> Documentation of the libraries are maintained by the library developers and are usually up to date except for new or testing languages<br>
Every good API will have documentation
<br>If you are searching in a documentation, try to be directed when searching through a documentation otherwise you will be confused!<br>
Have a specific goal in mind!<br>Blindly scrolling through is good for discovery but usually it can be a rabbit hole coming out not getting anything]]></description><link>cos20007-oop\documentation.html</link><guid isPermaLink="false">COS20007 OOP/Documentation.md</guid><pubDate>Wed, 24 Apr 2024 05:31:50 GMT</pubDate></item><item><title><![CDATA[Error Messages]]></title><description><![CDATA[ 
 <br><br>Whenever we make mistakes we will get an error message<br>
The computer is trying to help you!
<br>We as programmers need to learn how to listen as computers cannot specify the specific error in our programs<br>Computers will try to tell us where it thinks the error is happening<br>
<img alt="Error messages example (1).png" src="\lib\media\error-messages-example-(1).png"><br>It takes practices to understand errors and some debugging]]></description><link>cos20007-oop\error-messages.html</link><guid isPermaLink="false">COS20007 OOP/Error Messages.md</guid><pubDate>Wed, 24 Apr 2024 03:28:07 GMT</pubDate><enclosure url="lib\media\error-messages-example-(1).png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;lib\media\error-messages-example-(1).png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Exceptions]]></title><description><![CDATA[ 
 <br><br>Exceptions are one way of reporting errors in our code<br>
We need to learn to handle others' exceptions and report errors gracefully yourself<br>Developers create applications, building on the available class libraries<br>
Many libraries use exceptions to report errors they encounter<br>
Exceptions provide an alternate way of ending method calls
<br>Exceptions are objects! (Objects that contain error message)<br>When dealing with exceptions we usually try to perform the code and catch any exceptions<br>
e.g. The file that is going to be read are corrupt<br>Code for exceptions :<br>
try -&gt; Code you want to est<br>
{<br>
...<br>
}<br>
catch(System.Exception e) -&gt; What should happen if an exception indeed happen<br>
{<br>
//cleanup<br>
...<br>
}<br>
finally -&gt; This will always run when it ends exception or not<br>
{<br>
...<br>
}<br>Avoid using exceptions for known error conditions<br><img alt="c sharp exceptions errors handling (1).png" src="\lib\media\c-sharp-exceptions-errors-handling-(1).png">]]></description><link>cos20007-oop\exceptions.html</link><guid isPermaLink="false">COS20007 OOP/Exceptions.md</guid><pubDate>Mon, 22 Apr 2024 10:42:57 GMT</pubDate><enclosure url="lib\media\c-sharp-exceptions-errors-handling-(1).png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;lib\media\c-sharp-exceptions-errors-handling-(1).png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Inheritence]]></title><description><![CDATA[ 
 <br>Generalization and Specialization of abstraction<br><br>The whole idea of inheritance is that we have a parent class that can have one or more children classes, the children inherit attributes and the behaviour of the parents<br>
Inheritance bring flexibility, extensibility and adaptability to Object Oriented Programs
<br>e.g. Shape with a a child class of Ellipse and Rectangle<br>Shape has a position, size and can be drawn<br>Ellipse is a kind of shape<br>
Rectangle is a kind of shape<br>thus they inherit the position, size and can be drawn but have different function<br>The child class can change how inherited methods behave (Overriding the parent)<br>
Two types of overrides :<br>
<br>We have to override the method by not providing it's own implementation in the parent class
<br>We can override if we want to
<br>Child class can add their own additional features<br>Child classes does inherit everything from the parent, there are access levels :<br>
Public = Anyone will inherit<br>
Protected = Only derived classes<br>
Private = Nobody else<br>Inheritance are declared by derived classes (Which means parent does not know if they have children but the children say that they have a parent)<br>
Inheritance is self declared by the child<br>Each object can only derive from one parent (Cannot be multiple)]]></description><link>cos20007-oop\inheritence.html</link><guid isPermaLink="false">COS20007 OOP/Inheritence.md</guid><pubDate>Mon, 22 Apr 2024 06:11:22 GMT</pubDate></item><item><title><![CDATA[Interfaces]]></title><description><![CDATA[ 
 <br><br>We use an interface to define the features we need.<br>
One difference between abstract class and an interface is that everything in an interface is abstract so it is a class that define expectations for other classes<br>We need to specify the features that implementing classes must provide<br>e.g. Sorter class which want to sort as many kinds as possible regardless of what their fundamental types or specialized types is<br>This sorter need to compare itself to another object (Know what data type they are)<br>Example code : <br>
public interface IComparable&lt;in T&gt;<br>
{<br>
int Compare(T other);<br>
}<br>
C#  uses an I prefix to interface names
<br>Any class can implement an interface (Classes can inherit from one class, but can implement many interfaces)<br>Interface is technically an abstract class so it is essentially another data type (Polymorphism can be used)<br><br>
<br>Standard inheritance needs you to have a family of related types
<br>Use interfaces to define the features you need when a family of types does not make sense
<br>Interfaces allow you to access features in a flexible way
]]></description><link>cos20007-oop\interfaces.html</link><guid isPermaLink="false">COS20007 OOP/Interfaces.md</guid><pubDate>Mon, 22 Apr 2024 07:21:53 GMT</pubDate></item><item><title><![CDATA[Method]]></title><description><![CDATA[ 
 <br><br>Method are how we define in our object what the object can do, methods can be public or private<br>The way that object collaborate is they ask other objects to execute method which we call calling a method<br><br>A method usually has parameters which define the expectations of a method<br>
When we call a method with parameters we need to fulfill those expectations (Data types are important here!)<br>
The method already knows what kind of data it is expecting
<br>The names of the parameters does not matter, they only need to know the types of data it is expecting<br><br>Method overloading is having multiple methods that have the same names (It requires that each of the methods must have different parameters)<br>Method overloading usually are used to call each other<br>
Only overload when we need to!
]]></description><link>cos20007-oop\method.html</link><guid isPermaLink="false">COS20007 OOP/Method.md</guid><pubDate>Wed, 24 Apr 2024 03:09:25 GMT</pubDate></item><item><title><![CDATA[Object Collaboration]]></title><description><![CDATA[ 
 <br><br>
<br>Association represents a relationship between two or more objects where each object has its own lifecycle, and there is no ownership implied.
<br>It's a generic relationship where objects are aware of each other and interact at a certain level.
<br>Association can be one-to-one, one-to-many, or many-to-many.
<br>Example: A teacher (object) and a student (object) are associated. A teacher can teach multiple students, and a student can be taught by multiple teachers.
<br><br>
<br>Aggregation is a special type of association where one object contains another object, and the contained object can exist independently of the container object.
<br>It represents a whole-part relationship, where the part can exist without the whole.
<br>Aggregation implies a weaker form of ownership compared to composition.
<br>Example: A university (object) has departments (objects). Departments can exist independently of the university and can be part of different universities.
<br><br>
<br>Composition is a stronger form of aggregation where the lifetime of the contained object is controlled by the container object.
<br>It represents a stronger whole-part relationship, where the part cannot exist without the whole.
<br>When the container object is destroyed, the contained objects are also destroyed.
<br>Example: A car (object) has an engine (object). The engine is part of the car and cannot exist independently. When the car is destroyed, the engine is also destroyed.
<br><br>
<br>Dependency represents a relationship where one class (or object) depends on another class (or object) for its functionality, but there's no ownership or containment involved.
<br>It occurs when one class uses another class, typically as a parameter to a method, or through local variables within a method.
<br>A change in the dependent class may affect the behavior of the dependent class.
<br>Example: A Car class may depend on a Fuel class to provide fuel for its operation. The Car class uses methods or properties of the Fuel class to consume fuel, but it doesn't own or contain the Fuel object.
]]></description><link>cos20007-oop\object-collaboration.html</link><guid isPermaLink="false">COS20007 OOP/Object Collaboration.md</guid><pubDate>Thu, 04 Apr 2024 05:15:00 GMT</pubDate></item><item><title><![CDATA[Polymorphism]]></title><description><![CDATA[ 
 <br><br>It is the use of child objects where the parent is expected<br>
Poly means many and Morph is forms = Polymorphism is many forms
<br>e.g. Shape as parent class, Ellipse and Rectangle as children<br>
The parent class sets the signature (Access modifier, return type, name of the method and the parameters)<br>
Shape have the draw method but it is an placeholder / abstract (Abstract classes cannot create objects)<br>
Parent classes can have placeholder methods that must be overridden<br>Parents are setting down expectation for their children<br>
So here Ellipse and Rectangle must override draw<br>By doing polymorphism we can use object to call the methods of the child<br><br>
<br>Flexibility = We can refer to an object through a bunch of different names and it will still work how we expect it to work
<br>Adaptable = Utilities like collection classes can work on objects
]]></description><link>cos20007-oop\polymorphism.html</link><guid isPermaLink="false">COS20007 OOP/Polymorphism.md</guid><pubDate>Mon, 22 Apr 2024 06:21:15 GMT</pubDate></item><item><title><![CDATA[Responsibility Driven Design]]></title><description><![CDATA[ 
 <br><br>Software development involves providing instructions for an unintelligent computer<br>
Developers usually work in teams to build software solutions, which typically contain millions of instructions<br>Seeing how a solution will work requires clear communication<br>
Humans are not perfect in remembering stuff, sometimes if we don't write down certain decisions we might get back in question and go back through the whole thought process in figuring out why we got into the conclusion all over again
<br>Create an effective Object Oriented designs by using Roles, Responsibilities and Collaborations<br>
<br>
Define the purpose for objects in your program using Roles<br>
Picture the problem domain and identify candidate roles (nouns are a good start)<br>
e.g.  Chess game which have a board, board position, pieces, players and so on
Explore candidates roles using CRC(Candidate Role, Responsibility and Collaborations) cards<br>
e.g. Chess can have a board and cell and piece of King, Queen, Bishop, Knight, Rook and Pawn
Draw boxes for classes in UML class diagrams to communicate static structure

<br>
Define Responsibilities for each candidate role<br>
<img alt="Responsibilities in a Responsibility Driven Design (1).png" src="\lib\media\responsibilities-in-a-responsibility-driven-design-(1).png"><br>
You must include a responsibilities to do stuff and also know stuff<br>
e.g. a king piece must know his color, a cell must know its occupant and the board must know...<br>
e.g. a pawn can be a queen, a board can move pieces, a cell can hold a piece
Explore responsibilities using CRC cards
Document responsibilities in UML class diagrams<br>
e.g.

<br><br><br>
<br>
Collaborate with other objects to meet responsibilities<br>
When asked to perform a task, objects can ask others for help

Think of collaborations as a client / supplier interaction or as a contract

Use the different kinds of relationships to help identify possible links
<img alt="Dependencies in Responsibility Driven Design.png" src="\lib\media\dependencies-in-responsibility-driven-design.png">
Permanent relationships are modelled as association using a solid line in UML<br>
<img alt="Permanent relationship in Responsibility Driven Design.png" src="\lib\media\permanent-relationship-in-responsibility-driven-design.png">
Aggregation extends association to indicate a whole-part relation (Open Diamond)<br>
<img alt="Whole-Part relation in Responsibility Driven Design.png" src="\lib\media\whole-part-relation-in-responsibility-driven-design.png">
Composition is a kind of aggregation, indicating destruction of the whole involves destruction of the part<br>
<img alt="Composition in a Responsibility Driven Design.png" src="\lib\media\composition-in-a-responsibility-driven-design.png">
Inheritance captures class and interface inheritance for specialisation / generalisation (indicated by open triangle) (The triangle points to the parent)
Use scenarios to test how your model responds to events and implements features (Use case)

Think of sequence diagrams as scripts, with life lines defining the existence of objects


]]></description><link>cos20007-oop\responsibility-driven-design.html</link><guid isPermaLink="false">COS20007 OOP/Responsibility Driven Design.md</guid><pubDate>Mon, 22 Apr 2024 11:46:43 GMT</pubDate><enclosure url="lib\media\responsibilities-in-a-responsibility-driven-design-(1).png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;lib\media\responsibilities-in-a-responsibility-driven-design-(1).png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Scope]]></title><description><![CDATA[ 
 <br><br>Scope tells us where a variable can be accessed (Who knows about a variable)<br>
The one who knows can be a methods, classes, namespaces<br>
<img alt="Image about Scope (1).png" src="\lib\media\image-about-scope-(1).png"><br>
We cannot re-declare something within the same scope
]]></description><link>cos20007-oop\scope.html</link><guid isPermaLink="false">COS20007 OOP/Scope.md</guid><pubDate>Wed, 24 Apr 2024 03:20:04 GMT</pubDate><enclosure url="lib\media\image-about-scope-(1).png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;lib\media\image-about-scope-(1).png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[The Stack & The Heap]]></title><description><![CDATA[ 
 <br><br>
<br>Current state of our code (Local variables)
<br>Local variables are pointing to those fundamental data types (Floats, Int, String, Bool)
<br><br>
<br>Objects exist on the heap
<br>More managed by what we are doing when we run the software
<br><br>Languages use some form of pointer to refer to objects<br>
C# and Java = Reference Types &amp; Value Types<br>
C++ and Objective-C = Pointers &amp; Types]]></description><link>cos20007-oop\the-stack-&amp;-the-heap.html</link><guid isPermaLink="false">COS20007 OOP/The Stack &amp; The Heap.md</guid><pubDate>Mon, 22 Apr 2024 04:02:53 GMT</pubDate></item></channel></rss>